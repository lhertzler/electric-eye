<h2 class="ftd-c">Featured Products</h2>
<div class="ft-product-carousel">
  <span class="carouselPrev" data-count="1"><img class="icon-png" src="{{ 'angle-right.png' | asset_url }}"></span>
    <div id="carousel" class="row">
      {% assign count = 0 %}
      {%- assign collection = collections[section.settings.collection] -%}
      {% for product in collection.products %}
      {% assign count = count | plus: 1 %}
      <div class="small-12 medium-3 columns item" data-count="{{ count }}" onmouseout="removeClass(this, 'reveal');" onmouseover="addClass(this, 'reveal');">
        <a href="{{ product.url | within: collection }}" class="featured-collection-item">
          {% if product.featured_image != blank %}
            <div class="featured-collection__image">
              {% include 'responsive-image' with
                image: product.featured_image,
                max_width: 480,
                max_height: 480
              %}
              <span class="open-quick-view" data-product="{{ product.id }}">
                Quick View
              </span>
            </div>
          {% endif %}
          <p>{{ product.title | escape }}</p>
          <span>
            {% if product.compare_at_price > product.price %}
            <span class="sale-bubble">SALE</span>
              {% if product.price_varies %}
                {%- assign sale_price = product.price | money -%}
                {{ 'products.product.on_sale_from_html' | t: price: sale_price }}
              {% else %}
                {{ product.price | money }}
                <strike>{{ product.compare_at_price | money }}</strike>
              {% endif %}
            {% else %}
              {% if product.price_varies %}
                {%- assign price = product.price | money -%}
                {{ 'products.product.from_text_html' | t: price: price }}
              {% else %}
                {{ product.price | money }}
              {% endif %}
            {% endif %}
          </span>
        </a>
      </div>
      <span class="quick-view" qv-data-count="{{ count }}" data-product="{{ product.id }}">
        <img class="icon-png close" src="{{ 'icon-close.png' | asset_url }}">
        <div class="prev">
          <img class="icon-png" src="{{ 'angle-left.png' | asset_url }}">
        </div>
        <div class="row">
          <div class="medium-6 small-12 columns ft-image">
            <div class="featured-collection__image" style="background-image: url({{ product.featured_image | image_url }});">

            </div>
          </div>
          <div class="medium-6 small-12 columns qv-content">
            <p class="vendor">{{ product.vendor }}</p>
            <p class="sku">SKU-{{ product.selected_or_first_available_variant.sku }}</p>
            <h3>Product Name</h3>
            <div class="price">
              {% if product.compare_at_price > product.price %}
                <span class="sale-bubble">SALE</span>
                {% if product.price_varies %}
                  {%- assign sale_price = product.price | money -%}
                  {{ 'products.product.on_sale_from_html' | t: price: sale_price }}
                {% else %}
                  {{ product.price | money }}
                  <strike>{{ product.compare_at_price | money }}</strike>
                {% endif %}
              {% else %}
                {% if product.price_varies %}
                  {%- assign price = product.price | money -%}
                  {{ 'products.product.from_text_html' | t: price: price }}
                {% else %}
                  {{ product.price | money }}
                {% endif %}
              {% endif %}
            </div>
            <p class="description">{{ product.description }}</p>
            <div class="add-to-cart-js">
              <div class="increments">
                <span class="down">-</span>
                <span class="value">1</span>
                <span class="up">+</span>
              </div>
              <button type="submit" data-cart-quantity="1" data-cart-add="{{ product.variants.first.id }}">
                  <span data-submit-button-text>
                    {% if product.available %}
                      {{ 'products.product.add_to_cart' | t }}
                    {% else %}
                      {{ 'products.product.sold_out' | t }}
                    {% endif %}
                  </span>
              </button>
            </div>
          </div>
        </div>
        <div class="next"><img class="icon-png" src="{{ 'angle-right.png' | asset_url }}"></div>
      </span>
    {% endfor %}
      <div class="notification">
        <span>&#10003;</span>
        <p>Item added to cart!</p>
      </div>
    </div>
    <span class="carouselNext" data-count="4"><img class="icon-png" src="{{ 'angle-right.png' | asset_url }}"></span>
</div>

<script type="text/javascript">
/*
Helpers for revealing quick view button
*/
const addClass = (o, c) => {
    let re = new RegExp("(^|\\s)" + c + "(\\s|$)", "g")
    if (re.test(o.className)) return
    o.className = (o.className + " " + c).replace(/\s+/g, " ").replace(/(^ | $)/g, "")
}

const removeClass = (o, c) => {
    let re = new RegExp("(^|\\s)" + c + "(\\s|$)", "g")
    o.className = o.className.replace(re, "$1").replace(/\s+/g, " ").replace(/(^ | $)/g, "")
}

/*
Open correct product when clicking quick view in carousel
*/
const button = document.querySelectorAll('.open-quick-view');
button.forEach(item => {
  item.addEventListener('click', (event) => {
  event.preventDefault();
  let productId = event.target.getAttribute('data-product');
  let qv = document.querySelectorAll('[data-product="'+productId+'"]');
  qv[1].classList.add('active');
  })
})

/*
Display next/previous quick view items when clicking arrows
*/
const qvNavTarget = document.querySelectorAll('.next, .prev');

let quickViewNav = (dir) => {
  let current = document.querySelector('.quick-view.active');

  let forward = parseInt(current.getAttribute('qv-data-count')) + 1;
  let backward = parseInt(current.getAttribute('qv-data-count')) - 1;

  if (dir.currentTarget.classList.contains('next')) {
    let go = document.querySelectorAll('[qv-data-count="'+forward+'"]');
    if(go==null){ current.classList.remove('active'); }
    current.classList.remove('active');
    go[0].classList.add('active');
  } else {
    let go = document.querySelectorAll('[qv-data-count="'+backward+'"]');
    if(go==null){ current.classList.remove('active'); }
    current.classList.remove('active');
    go[0].classList.add('active');
  }
}

/*
Bind function to each quick view arrows
*/
qvNavTarget.forEach(item => {
  item.addEventListener('click', (event) => {
    quickViewNav(event);
  })
})

const qvClose = document.querySelectorAll('.quick-view .close');
qvClose.forEach(item => {
  item.addEventListener('click', (event) => {
    let qvs = document.querySelectorAll('.quick-view.active');
    qvs.forEach(close => {
      close.classList.remove('active');
    })
  })
})

/*
Display next/previous featured carousel items when clicking arrows
*/
const carouselNavTarget = document.querySelectorAll('.carouselNext, .carouselPrev');

let carouselNav = (dir) => {
  let hidden = document.querySelectorAll('.item.hide-me');
  let nextArrow = document.querySelector('.carouselNext');
  let prevArrow = document.querySelector('.carouselPrev');
  let totalItems = document.querySelectorAll('.item').length;

  let forward = parseInt(nextArrow.getAttribute('data-count'));
  let backward = parseInt(prevArrow.getAttribute('data-count'));

  if (dir.currentTarget.classList.contains('carouselNext')) {
    let forward = parseInt(nextArrow.getAttribute('data-count')) + 1;
    let hide = document.querySelectorAll('.item[data-count="'+backward+'"]');
    let show = document.querySelectorAll('.item[data-count="'+forward+'"]');
    if( (forward - 1)==totalItems){ return; }
    nextArrow.setAttribute('data-count', parseInt(show[0].getAttribute('data-count')));
    prevArrow.setAttribute('data-count', (parseInt(hide[0].getAttribute('data-count')) + 1));
    hide[0].classList.add('hide-me');
    show[0].classList.remove('hide-me');
  } else {
    let backward = parseInt(prevArrow.getAttribute('data-count')) - 1;
    let show = document.querySelectorAll('.item[data-count="'+backward+'"]');
    let hide = document.querySelectorAll('.item[data-count="'+forward+'"]');
    if( (parseInt(show[0].getAttribute('data-count'))) == 0 ){ return; }
    nextArrow.setAttribute('data-count', (parseInt(hide[0].getAttribute('data-count')) - 1));
    if(backward < 4) {
      prevArrow.setAttribute('data-count', (parseInt(show[0].getAttribute('data-count'))));
    } else {
      prevArrow.setAttribute('data-count', (parseInt(show[0].getAttribute('data-count')) - 1));
    }
    show[0].classList.remove('hide-me');
    hide[0].classList.add('hide-me');
  }
}

/*
Bind function to each carousel arrows
*/
carouselNavTarget.forEach(item => {
  item.addEventListener('click', (event) => {
    carouselNav(event);
  })
})

/*
AJAX the product to the cart via CartJS and update header cart icon count
*/
document.querySelectorAll('.add-to-cart-js button').forEach(item => {
  item.addEventListener('click', (event) => {
    let note = document.querySelector('.notification');
    note.classList.add('success');
    setTimeout(function(){
      note.classList.remove('success');
    }, 2500)

    // Update header cart number
    let num = parseInt(document.querySelector('.cart-count').innerText);
    let parent = event.currentTarget.parentElement;
    let quantityCart = parseInt(parent.children[0].children[1].innerText);
    num = num + quantityCart;
    if(document.querySelector('.cart-count').classList.contains('zero')) {
      document.querySelector('.cart-count').classList.remove('zero');
    }
    //console.log('=> '+num);
    document.querySelector('.cart-count').innerText = num;
  })
})

/*
Update quantities on click
*/
const increments = document.querySelectorAll('.add-to-cart-js span');
increments.forEach(item => {
  item.addEventListener('click', (event) => {
    let parent = event.currentTarget.parentElement.parentElement;
    let quantityCartJS = parseInt(parent.children[0].children[1].innerText);
    //console.log(quantityCartJS);
    if(event.currentTarget.classList.contains('up')){
      parent.querySelector('button').setAttribute('data-cart-quantity', quantityCartJS + 1);
      parent.querySelector('span.value').innerText = quantityCartJS + 1;
    } else if(event.currentTarget.classList.contains('down')){
      parent.querySelector('button').setAttribute('data-cart-quantity', quantityCartJS - 1);
      parent.querySelector('span.value').innerText = quantityCartJS - 1;
    }
  })
})

/*
* Show/hide content overlay for mega menu
*/
const showOverlay = () => {
  document.querySelector('#MainContent').classList.add('overlay');
};

const removeOverlay = () => {
  document.querySelector('#MainContent').classList.remove('overlay');
};

/*
* Show/hide mobile menu
*/
const mobileMenu = document.querySelector('.hamburger');
  mobileMenu.addEventListener('click', (event) => {
    let mobileMega = document.querySelector('.mobile-mega');
    mobileMega.classList.add('show-me');
})

const closeMobile = document.querySelector('.dark-close');
closeMobile.addEventListener('click', (event) => {
  let mobileMega = document.querySelector('.mobile-mega');
  mobileMega.classList.remove('show-me');
})

const mHasMega = document.querySelector('.has-mega-mobile');
mHasMega.addEventListener('click', (event) => {
  let megaMenu = document.querySelector('.mega-menu-mobile');
  let plusClose = document.querySelector('.plus');
  if( megaMenu.classList.contains('show-menu')) {
    megaMenu.classList.remove('show-menu');
    plusClose.classList.remove('rotate-45');
  } else {
    megaMenu.classList.add('show-menu');
    plusClose.classList.add('rotate-45');
  }
})


</script>


{% schema %}
  {
    "name": "Featured product carousel",
    "settings": [
      {
        "type": "checkbox",
        "id": "ajax",
        "label": "Show Quick View"
      },
      {
        "id": "collection",
        "type": "collection",
        "label": "Collection"
      }
    ],
    "presets": [
      {
        "name": "Featured Products Carousel",
        "category": "Product"
      }
    ]
  }
{% endschema %}
